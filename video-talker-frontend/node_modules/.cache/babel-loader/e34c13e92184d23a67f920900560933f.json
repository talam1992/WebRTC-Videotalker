{"ast":null,"code":"import store from '../../store/store';\nimport { callStates, setCallerUsername, setCallingDialogVisible, setCallRejected, setCallState, setLocalStream } from \"../../store/actions/callActions\";\nimport * as wss from '../wssConnection/wssConnection';\nconst preOfferAnswers = {\n  CALL_ACCEPTED: 'CALL_ACCEPTED',\n  CALL_REJECTED: 'CALL_REJECTED',\n  CALL_NOT_AVAILABLE: 'CALL_NOT_AVAILABLE'\n};\nconst defaultConstrains = {\n  video: true,\n  audio: true\n};\nexport const getLocalStream = () => {\n  navigator.mediaDevices.getUserMedia(defaultConstrains).then(stream => {\n    store.dispatch(setLocalStream(stream));\n    store.dispatch(setCallState(callStates.CALL_AVAILABLE));\n  }).catch(err => {\n    console.log('error occured when trying to get access to get local stream');\n    console.log(err);\n  });\n};\nlet connectedUserSocketId;\nexport const callToOtherUser = calleeDetails => {\n  connectedUserSocketId = calleeDetails.socketId;\n  store.dispatch(setCallState(callStates.CALL_IN_PROGRESS));\n  store.dispatch(setCallingDialogVisible(true));\n  wss.sendPreOffer({\n    callee: calleeDetails,\n    caller: {\n      username: store.getState().dashboard.username\n    }\n  });\n};\nexport const handlePreOffer = data => {\n  if (checkIfCallIsPossible()) {\n    connectedUserSocketId = data.callerSocketId;\n    store.dispatch(setCallerUsername(data.callerUsername));\n    store.dispatch(setCallState(callStates.CALL_REQUESTED));\n  } else {\n    wss.sendPreOfferAnswer({\n      callerSocketId: data.callerSocketId,\n      answer: preOfferAnswers.CALL_NOT_AVAILABLE\n    });\n  }\n};\nexport const acceptIncommingCallRequest = () => {\n  wss.sendPreOfferAnswer({\n    callerSocketId: connectedUserSocketId,\n    answer: preOfferAnswers.CALL_ACCEPTED\n  });\n};\nexport const rejectIncommingCallRequest = () => {\n  wss.sendPreOfferAnswer({\n    callerSocketId: connectedUserSocketId,\n    answer: preOfferAnswers.CALL_REJECTED\n  });\n  resetCallData();\n};\nexport const handlePreOfferAnswer = data => {\n  store.dispatch(setCallingDialogVisible(false));\n\n  if (data.answer === preOfferAnswers.CALL_ACCEPTED) {// send webRTC offer\n  } else {\n    let rejectionReason;\n\n    if (data.answer === preOfferAnswers.CALL_NOT_AVAILABLE) {\n      rejectionReason = 'Callee is not able to pick up the call right now';\n    } else {\n      rejectionReason = 'Call rejected by the callee';\n    }\n\n    store.dispatch(setCallRejected({\n      rejected: true,\n      reason: rejectionReason\n    }));\n  }\n};\nexport const checkIfCallIsPossible = () => {\n  if (store.getState().call.localStream === null || store.getState().call.callState !== callStates.CALL_AVAILABLE) {\n    return false;\n  } else {\n    return true;\n  }\n};\nexport const resetCallData = () => {\n  connectedUserSocketId = null;\n  store.dispatch(setCallState(callStates.CALL_AVAILABLE));\n};","map":{"version":3,"sources":["C:/Users/Timothy Lam/Documents/GitHub/WebRTC-Videotalker/video-talker-frontend/src/utils/webRTC/webRTCHandler.js"],"names":["store","callStates","setCallerUsername","setCallingDialogVisible","setCallRejected","setCallState","setLocalStream","wss","preOfferAnswers","CALL_ACCEPTED","CALL_REJECTED","CALL_NOT_AVAILABLE","defaultConstrains","video","audio","getLocalStream","navigator","mediaDevices","getUserMedia","then","stream","dispatch","CALL_AVAILABLE","catch","err","console","log","connectedUserSocketId","callToOtherUser","calleeDetails","socketId","CALL_IN_PROGRESS","sendPreOffer","callee","caller","username","getState","dashboard","handlePreOffer","data","checkIfCallIsPossible","callerSocketId","callerUsername","CALL_REQUESTED","sendPreOfferAnswer","answer","acceptIncommingCallRequest","rejectIncommingCallRequest","resetCallData","handlePreOfferAnswer","rejectionReason","rejected","reason","call","localStream","callState"],"mappings":"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","sourcesContent":["import store from '../../store/store';\r\nimport { callStates, setCallerUsername, setCallingDialogVisible, setCallRejected, setCallState, setLocalStream } from \"../../store/actions/callActions\";\r\nimport * as wss from '../wssConnection/wssConnection';\r\n\r\nconst preOfferAnswers = {\r\n    CALL_ACCEPTED: 'CALL_ACCEPTED',\r\n    CALL_REJECTED: 'CALL_REJECTED',\r\n    CALL_NOT_AVAILABLE: 'CALL_NOT_AVAILABLE'\r\n};\r\n\r\nconst defaultConstrains = {\r\n    video: true,\r\n    audio: true\r\n};\r\n\r\nexport const getLocalStream = () => {\r\n    navigator.mediaDevices.getUserMedia(defaultConstrains)\r\n    .then(stream => {\r\n        store.dispatch(setLocalStream(stream));\r\n        store.dispatch(setCallState(callStates.CALL_AVAILABLE));\r\n    })\r\n    .catch(err => {\r\n        console.log('error occured when trying to get access to get local stream');\r\n        console.log(err);\r\n    });\r\n}\r\n;\r\n\r\nlet connectedUserSocketId;\r\n\r\nexport const callToOtherUser = (calleeDetails) => {\r\n    connectedUserSocketId = calleeDetails.socketId;\r\n    store.dispatch(setCallState(callStates.CALL_IN_PROGRESS));\r\n    store.dispatch(setCallingDialogVisible(true));\r\n    wss.sendPreOffer({\r\n        callee: calleeDetails,\r\n        caller: {\r\n            username: store.getState().dashboard.username\r\n        }\r\n    });\r\n};\r\n\r\nexport const handlePreOffer = (data) => {\r\n\r\n    if(checkIfCallIsPossible()) {\r\n        connectedUserSocketId = data.callerSocketId;\r\n        store.dispatch(setCallerUsername(data.callerUsername));\r\n        store.dispatch(setCallState(callStates.CALL_REQUESTED));\r\n    } else {\r\n        wss.sendPreOfferAnswer({\r\n            callerSocketId: data.callerSocketId,\r\n            answer: preOfferAnswers.CALL_NOT_AVAILABLE\r\n        });\r\n    }\r\n};\r\n\r\nexport const acceptIncommingCallRequest = () => {\r\n    wss.sendPreOfferAnswer({\r\n        callerSocketId: connectedUserSocketId,\r\n        answer: preOfferAnswers.CALL_ACCEPTED\r\n    });\r\n};\r\n\r\nexport const rejectIncommingCallRequest = () => {\r\n    wss.sendPreOfferAnswer({\r\n        callerSocketId: connectedUserSocketId,\r\n        answer: preOfferAnswers.CALL_REJECTED\r\n    });\r\n\r\n    resetCallData();\r\n};\r\n\r\nexport const handlePreOfferAnswer = (data) => {\r\n\r\n    store.dispatch(setCallingDialogVisible(false));\r\n\r\n    if (data.answer === preOfferAnswers.CALL_ACCEPTED) {\r\n        // send webRTC offer\r\n    } else {\r\n        let rejectionReason;\r\n        if (data.answer === preOfferAnswers.CALL_NOT_AVAILABLE) {\r\n            rejectionReason = 'Callee is not able to pick up the call right now';\r\n        } else {\r\n            rejectionReason = 'Call rejected by the callee';\r\n        }\r\n        store.dispatch(setCallRejected({\r\n            rejected: true,\r\n            reason: rejectionReason\r\n        }))\r\n    }\r\n};\r\n\r\nexport const checkIfCallIsPossible = () => {\r\n    if(store.getState().call.localStream === null ||\r\n    store.getState().call.callState !== callStates.CALL_AVAILABLE) {\r\n        return false;\r\n    } else {\r\n        return true;\r\n    }\r\n};\r\n\r\nexport const resetCallData = () => {\r\n    connectedUserSocketId = null;\r\n    store.dispatch(setCallState(callStates.CALL_AVAILABLE));\r\n};"]},"metadata":{},"sourceType":"module"}