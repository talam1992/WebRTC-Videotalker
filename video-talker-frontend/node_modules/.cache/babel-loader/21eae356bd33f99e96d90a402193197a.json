{"ast":null,"code":"import socketClient from 'socket.io-client';\nimport store from '../../store/store';\nimport * as dashboardActions from '../../store/actions/dashboardActions';\nconst SERVER = 'http://localhost:5000';\nconst broadcastEventTypes = {\n  ACTIVE_USERS: 'ACTIVE_USERS',\n  GROUP_CALL_ROOMS: 'GROUP_CALL_ROOMS'\n};\nlet socket;\nexport const connectWithWebSocket = () => {\n  socket = socketClient(SERVER);\n  socket.on('connection', () => {\n    console.log('succesfully connected with wss server');\n    console.log(socket.id);\n  });\n  socket.on('broadcast', data => {\n    handleBroadcastEvents(data);\n  });\n};\nexport const registerNewUser = username => {\n  socket.emit('register-new-user', {\n    username: username,\n    socketId: socket.id\n  });\n};\n\nconst handleBroadcastEvents = data => {\n  switch (data.event) {\n    case broadcastEventTypes.ACTIVE_USERS:\n      const activeUsers = data.activeUsers.filter(activeUser => activeUser.socketId !== socket.id);\n      store.dispatch(dashboardActions.setActiveUsers(activeUsers));\n      break;\n\n    default:\n      break;\n  }\n};","map":{"version":3,"sources":["C:/Users/Timothy Lam/Documents/GitHub/WebRTC-Videotalker/video-talker-frontend/src/utils/wssConnection/wssConnection.js"],"names":["socketClient","store","dashboardActions","SERVER","broadcastEventTypes","ACTIVE_USERS","GROUP_CALL_ROOMS","socket","connectWithWebSocket","on","console","log","id","data","handleBroadcastEvents","registerNewUser","username","emit","socketId","event","activeUsers","filter","activeUser","dispatch","setActiveUsers"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,kBAAzB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAO,KAAKC,gBAAZ,MAAkC,sCAAlC;AACA,MAAMC,MAAM,GAAG,uBAAf;AAEA,MAAMC,mBAAmB,GAAG;AAC1BC,EAAAA,YAAY,EAAE,cADY;AAE1BC,EAAAA,gBAAgB,EAAE;AAFQ,CAA5B;AAKA,IAAIC,MAAJ;AAEA,OAAO,MAAMC,oBAAoB,GAAG,MAAM;AACxCD,EAAAA,MAAM,GAAGP,YAAY,CAACG,MAAD,CAArB;AAEAI,EAAAA,MAAM,CAACE,EAAP,CAAU,YAAV,EAAwB,MAAM;AAC5BC,IAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAM,CAACK,EAAnB;AACD,GAHD;AAKAL,EAAAA,MAAM,CAACE,EAAP,CAAU,WAAV,EAAwBI,IAAD,IAAU;AAC/BC,IAAAA,qBAAqB,CAACD,IAAD,CAArB;AACD,GAFD;AAGD,CAXM;AAcP,OAAO,MAAME,eAAe,GAAIC,QAAD,IAAc;AAC3CT,EAAAA,MAAM,CAACU,IAAP,CAAY,mBAAZ,EAAiC;AAC/BD,IAAAA,QAAQ,EAAEA,QADqB;AAE/BE,IAAAA,QAAQ,EAAEX,MAAM,CAACK;AAFc,GAAjC;AAID,CALM;;AAOP,MAAME,qBAAqB,GAAID,IAAD,IAAU;AACtC,UAAOA,IAAI,CAACM,KAAZ;AACE,SAAKf,mBAAmB,CAACC,YAAzB;AACE,YAAMe,WAAW,GAAGP,IAAI,CAACO,WAAL,CAAiBC,MAAjB,CAAwBC,UAAU,IAAIA,UAAU,CAACJ,QAAX,KAAwBX,MAAM,CAACK,EAArE,CAApB;AACAX,MAAAA,KAAK,CAACsB,QAAN,CAAerB,gBAAgB,CAACsB,cAAjB,CAAgCJ,WAAhC,CAAf;AACA;;AACF;AACE;AANJ;AAQD,CATD","sourcesContent":["import socketClient from 'socket.io-client';\nimport store from '../../store/store';\nimport * as dashboardActions from '../../store/actions/dashboardActions';\nconst SERVER = 'http://localhost:5000';\n\nconst broadcastEventTypes = {\n  ACTIVE_USERS: 'ACTIVE_USERS',\n  GROUP_CALL_ROOMS: 'GROUP_CALL_ROOMS'\n};\n\nlet socket;\n\nexport const connectWithWebSocket = () => {\n  socket = socketClient(SERVER);\n\n  socket.on('connection', () => {\n    console.log('succesfully connected with wss server');\n    console.log(socket.id);\n  });\n\n  socket.on('broadcast', (data) => {\n    handleBroadcastEvents(data);\n  })\n}\n;\n\nexport const registerNewUser = (username) => {\n  socket.emit('register-new-user', {\n    username: username,\n    socketId: socket.id\n  })\n}\n\nconst handleBroadcastEvents = (data) => {\n  switch(data.event) {\n    case broadcastEventTypes.ACTIVE_USERS:\n      const activeUsers = data.activeUsers.filter(activeUser => activeUser.socketId !== socket.id);\n      store.dispatch(dashboardActions.setActiveUsers(activeUsers));\n      break;\n    default:\n      break;\n  }\n}"]},"metadata":{},"sourceType":"module"}