{"ast":null,"code":"import socketClient from 'socket.io-client';\nimport store from '../../store/store';\nimport * as dashboardActions from '../../store/actions/dashboardActions';\nimport * as webRTCHandler from '../webRTC/webRTCHandler';\nconst SERVER = 'http://localhost:5000';\nconst broadcastEventTypes = {\n  ACTIVE_USERS: 'ACTIVE_USERS',\n  GROUP_CALL_ROOMS: 'GROUP_CALL_ROOMS'\n};\nlet socket;\nexport const connectWithWebSocket = () => {\n  socket = socketClient(SERVER);\n  socket.on('connection', () => {\n    console.log('succesfully connected with wss server');\n    console.log(socket.id);\n  });\n  socket.on('broadcast', data => {\n    handleBroadcastEvents(data);\n  }); // listeners related with direct call\n\n  socket.on('pre-offer', data => {\n    webRTCHandler.handlePreOffer(data);\n  });\n  socket.on('pre-offer-answer', data => {\n    webRTCHandler.handlePreOfferAnswer(data);\n  });\n  socket.on('webRTC-offer', data => {\n    webRTCHandler.handleOffer(data);\n  });\n  socket.on('webRTC-answer', data => {\n    webRTCHandler.handleAnswer(data);\n  });\n  socket.on('webRTC-candidate', data => {\n    webRTCHandler.handleCandidate(data);\n  });\n  socket.on('user-hanged-up', () => {\n    webRTCHandler.handleUserHangedUp();\n  });\n};\nexport const registerNewUser = username => {\n  socket.emit('register-new-user', {\n    username: username,\n    socketId: socket.id\n  });\n}; // emitting events to server related with direct call\n\nexport const sendPreOffer = data => {\n  socket.emit('pre-offer', data);\n};\nexport const sendPreOfferAnswer = data => {\n  socket.emit('pre-offer-answer', data);\n};\nexport const sendWebRTCOffer = data => {\n  socket.emit('webRTC-offer', data);\n};\nexport const sendWebRTCAnswer = data => {\n  socket.emit('webRTC-answer', data);\n};\nexport const sendWebRTCCandidate = data => {\n  socket.emit('webRTC-candidate', data);\n};\nexport const sendUserHangedUp = data => {\n  socket.emit('user-hanged-up', data);\n};\n\nconst handleBroadcastEvents = data => {\n  switch (data.event) {\n    case broadcastEventTypes.ACTIVE_USERS:\n      const activeUsers = data.activeUsers.filter(activeUser => activeUser.socketId !== socket.id);\n      store.dispatch(dashboardActions.setActiveUsers(activeUsers));\n      break;\n\n    default:\n      break;\n  }\n};","map":{"version":3,"sources":["C:/Users/Timothy Lam/Documents/GitHub/WebRTC-Videotalker/video-talker-frontend/src/utils/wssConnection/wssConnection.js"],"names":["socketClient","store","dashboardActions","webRTCHandler","SERVER","broadcastEventTypes","ACTIVE_USERS","GROUP_CALL_ROOMS","socket","connectWithWebSocket","on","console","log","id","data","handleBroadcastEvents","handlePreOffer","handlePreOfferAnswer","handleOffer","handleAnswer","handleCandidate","handleUserHangedUp","registerNewUser","username","emit","socketId","sendPreOffer","sendPreOfferAnswer","sendWebRTCOffer","sendWebRTCAnswer","sendWebRTCCandidate","sendUserHangedUp","event","activeUsers","filter","activeUser","dispatch","setActiveUsers"],"mappings":"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","sourcesContent":["import socketClient from 'socket.io-client';\nimport store from '../../store/store';\nimport * as dashboardActions from '../../store/actions/dashboardActions';\nimport * as webRTCHandler from '../webRTC/webRTCHandler';\n\nconst SERVER = 'http://localhost:5000';\n\nconst broadcastEventTypes = {\n  ACTIVE_USERS: 'ACTIVE_USERS',\n  GROUP_CALL_ROOMS: 'GROUP_CALL_ROOMS'\n};\n\nlet socket;\n\nexport const connectWithWebSocket = () => {\n  socket = socketClient(SERVER);\n\n  socket.on('connection', () => {\n    console.log('succesfully connected with wss server');\n    console.log(socket.id);\n  });\n\n  socket.on('broadcast', (data) => {\n    handleBroadcastEvents(data);\n  });\n\n  // listeners related with direct call\n  socket.on('pre-offer', (data) => {\n    webRTCHandler.handlePreOffer(data);\n  });\n\n  socket.on('pre-offer-answer', (data) => {\n    webRTCHandler.handlePreOfferAnswer(data);\n  });\n\n  socket.on('webRTC-offer', (data) => {\n    webRTCHandler.handleOffer(data);\n  });\n\n  socket.on('webRTC-answer', (data) => {\n    webRTCHandler.handleAnswer(data);\n  });\n\n  socket.on('webRTC-candidate', (data) => {\n    webRTCHandler.handleCandidate(data);\n  });\n\n  socket.on('user-hanged-up', () => {\n    webRTCHandler.handleUserHangedUp();\n  });\n};\n\nexport const registerNewUser = (username) => {\n  socket.emit('register-new-user', {\n    username: username,\n    socketId: socket.id\n  });\n};\n\n// emitting events to server related with direct call\n\nexport const sendPreOffer = (data) => {\n  socket.emit('pre-offer', data);\n};\n\nexport const sendPreOfferAnswer = (data) => {\n  socket.emit('pre-offer-answer', data);\n};\n\nexport const sendWebRTCOffer = (data) => {\n  socket.emit('webRTC-offer', data);\n};\n\nexport const sendWebRTCAnswer = (data) => {\n  socket.emit('webRTC-answer', data);\n};\n\nexport const sendWebRTCCandidate = (data) => {\n  socket.emit('webRTC-candidate', data);\n};\n\nexport const sendUserHangedUp = (data) => {\n  socket.emit('user-hanged-up', data);\n};\n\nconst handleBroadcastEvents = (data) => {\n  switch (data.event) {\n    case broadcastEventTypes.ACTIVE_USERS:\n      const activeUsers = data.activeUsers.filter(activeUser => activeUser.socketId !== socket.id);\n      store.dispatch(dashboardActions.setActiveUsers(activeUsers));\n      break;\n    default:\n      break;\n  }\n}\n;\n"]},"metadata":{},"sourceType":"module"}