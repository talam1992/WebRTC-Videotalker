[{"C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\index.js":"1","C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\App.js":"2","C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\utils\\wssConnection\\wssConnection.js":"3","C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\Dashboard\\Dashboard.js":"4","C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\LoginPage\\LoginPage.js":"5","C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\store\\store.js":"6","C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\store\\reducer.js":"7","C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\store\\reducers\\dashboardReducer.js":"8","C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\store\\actions\\dashboardActions.js":"9","C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\LoginPage\\components\\UsernameInput.js":"10","C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\LoginPage\\components\\SubmitButton.js":"11","C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\Dashboard\\components\\ActiveUsersList\\ActiveUsersList.js":"12","C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\Dashboard\\components\\ActiveUsersList\\ActiveUsersListItem.js":"13","C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\store\\reducers\\callReducer.js":"14","C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\utils\\webRTC\\webRTCHandler.js":"15","C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\store\\actions\\callActions.js":"16","C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\Dashboard\\components\\DirectCall\\DirectCall.js":"17","C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\Dashboard\\components\\RemoteVideoView\\RemoteVideoView.js":"18","C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\Dashboard\\components\\LocalVideoView\\LocalVideoView.js":"19","C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\Dashboard\\components\\CallRejectedDialog\\CallRejectedDialog.js":"20","C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\Dashboard\\components\\IncomingCallDialog\\IncomingCallDialog.js":"21","C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\Dashboard\\components\\CallingDialog\\CallingDialog.js":"22","C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\Dashboard\\components\\ConversationButtons\\ConversationButtons.js":"23","C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\Dashboard\\components\\ConversationButtons\\ConversationButton.js":"24","C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\Dashboard\\components\\DashboardInformation\\DashboardInformation.js":"25","C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\utils\\webRTC\\webRTCGroupCallHandler.js":"26","C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\Dashboard\\components\\GroupCallRoomsList\\GroupCallRoomsList.js":"27","C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\Dashboard\\components\\GroupCallRoomsList\\GroupCallRoomsListItem.js":"28"},{"size":342,"mtime":1616319683000,"results":"29","hashOfConfig":"30"},{"size":622,"mtime":1616320222000,"results":"31","hashOfConfig":"30"},{"size":2268,"mtime":1620923310891,"results":"32","hashOfConfig":"30"},{"size":1752,"mtime":1621618210299,"results":"33","hashOfConfig":"30"},{"size":1472,"mtime":1616430260000,"results":"34","hashOfConfig":"30"},{"size":231,"mtime":1616312667000,"results":"35","hashOfConfig":"30"},{"size":240,"mtime":1619193082262,"results":"36","hashOfConfig":"30"},{"size":526,"mtime":1616432725000,"results":"37","hashOfConfig":"30"},{"size":370,"mtime":1616432776000,"results":"38","hashOfConfig":"30"},{"size":464,"mtime":1616320773000,"results":"39","hashOfConfig":"30"},{"size":387,"mtime":1616320964000,"results":"40","hashOfConfig":"30"},{"size":641,"mtime":1620925796931,"results":"41","hashOfConfig":"30"},{"size":831,"mtime":1620925672828,"results":"42","hashOfConfig":"30"},{"size":2083,"mtime":1620924402905,"results":"43","hashOfConfig":"30"},{"size":6814,"mtime":1620925900273,"results":"44","hashOfConfig":"30"},{"size":2296,"mtime":1620924537789,"results":"45","hashOfConfig":"30"},{"size":1956,"mtime":1620923352836,"results":"46","hashOfConfig":"30"},{"size":876,"mtime":1620399172138,"results":"47","hashOfConfig":"30"},{"size":1007,"mtime":1620399211308,"results":"48","hashOfConfig":"30"},{"size":587,"mtime":1619722861306,"results":"49","hashOfConfig":"30"},{"size":973,"mtime":1620319058707,"results":"50","hashOfConfig":"30"},{"size":867,"mtime":1620926707382,"results":"51","hashOfConfig":"30"},{"size":2164,"mtime":1620923378224,"results":"52","hashOfConfig":"30"},{"size":701,"mtime":1620409762210,"results":"53","hashOfConfig":"30"},{"size":615,"mtime":1620988822930,"results":"54","hashOfConfig":"30"},{"size":312,"mtime":1621248976249,"results":"55","hashOfConfig":"30"},{"size":516,"mtime":1621618546495,"results":"56","hashOfConfig":"30"},{"size":386,"mtime":1621618608581,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1r73aoq",{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\index.js",[],"C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\App.js",[],"C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\utils\\wssConnection\\wssConnection.js",[],"C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\Dashboard\\Dashboard.js",["118"],"import React, { useEffect } from 'react';\nimport logo from '../resources/logo.png';\nimport ActiveUsersList from './components/ActiveUsersList/ActiveUsersList';\nimport * as webRTCHandler from '../utils/webRTC/webRTCHandler';\nimport * as webRTCGroupHandler from '../utils/webRTC/webRTCGroupCallHandler';\nimport DirectCall from './components/DirectCall/DirectCall';\nimport { connect } from 'react-redux';\nimport DashboardInformation from './components/DashboardInformation/DashboardInformation';\nimport { callStates } from '../store/actions/callActions';\nimport './Dashboard.css';\nimport GroupCallRoomsList from './components/GroupCallRoomsList/GroupCallRoomsList';\n\nconst Dashboard = ({ username, callState }) => {\n\nuseEffect(() => {\n  webRTCHandler.getLocalStream();\n  webRTCGroupHandler.connectWithMyPeer();\n}, []);\n  \n  return (\n    <div className='dashboard_container background_main_color'>\n      <div className='dashboard_left_section'>\n        <div className='dashboard_content_container'>\n            <DirectCall />\n            {callState !== callStates.CALL_IN_PROGRESS && <DashboardInformation username={username} />}\n        </div>\n        <div className='dashboard_rooms_container background_secondary_color'>\n            <GroupCallRoomsList />\n        </div>\n      </div>\n      <div className='dashboard_right_section background_secondary_color'>\n        <div className='dashboard_active_users_list'>\n          <ActiveUsersList />\n        </div>\n        <div className='dashboard_logo_container'>\n          <img className='dashboard_logo_image' src={logo} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ call, dashboard }) => ({\n  ...call,\n  ...dashboard\n})\n\nexport default connect(mapStateToProps)(Dashboard);\n","C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\LoginPage\\LoginPage.js",[],"C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\store\\store.js",[],"C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\store\\reducer.js",[],"C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\store\\reducers\\dashboardReducer.js",[],"C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\store\\actions\\dashboardActions.js",[],"C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\LoginPage\\components\\UsernameInput.js",[],"C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\LoginPage\\components\\SubmitButton.js",[],"C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\Dashboard\\components\\ActiveUsersList\\ActiveUsersList.js",[],"C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\Dashboard\\components\\ActiveUsersList\\ActiveUsersListItem.js",["119"],"import React from 'react';\nimport userAvatar from '../../../resources/userAvatar.png';\nimport { callStates } from '../../../store/actions/callActions';\nimport { callToOtherUser } from '../../../utils/webRTC/webRTCHandler';\n\nconst ActiveUsersListItem = (props) => {\n  const { activeUser, callState } = props;\n\n  const handleListItemPressed = () => {\n    if (callState === callStates.CALL_AVAILABLE) {\n      callToOtherUser(activeUser);\n    }\n  };\n\n  console.log(activeUser);\n\n  return (\n    <div className='active_user_list_item' onClick={handleListItemPressed}>\n      <div className='active_user_list_image_container'>\n        <img className='active_user_list_image' src={userAvatar} />\n      </div>\n      <span className='active_user_list_text'>{activeUser.username}</span>\n    </div>\n  );\n};\n\nexport default ActiveUsersListItem;\n","C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\store\\reducers\\callReducer.js",[],"C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\utils\\webRTC\\webRTCHandler.js",["120","121"],"import store from '../../store/store';\r\nimport { resetCallDataState, setLocalStream, setCallState, callStates, setCallingDialogVisible, setCallerUsername, setCallRejected, setRemoteStream, setScreenSharingActive } from '../../store/actions/callActions';\r\nimport * as wss from '../wssConnection/wssConnection';\r\n\r\nconst preOfferAnswers = {\r\n  CALL_ACCEPTED: 'CALL_ACCEPTED',\r\n  CALL_REJECTED: 'CALL_REJECTED',\r\n  CALL_NOT_AVAILABLE: 'CALL_NOT_AVAILABLE'\r\n};\r\n\r\nconst defaultConstrains = {\r\n  video: true,\r\n  audio: true\r\n};\r\n\r\nconst configuration = {\r\n  iceServers: [{\r\n    urls: 'stun:stun.l.google.com:13902'\r\n  }]\r\n};\r\n\r\nlet connectedUserSocketId;\r\nlet peerConnection;\r\n\r\nexport const getLocalStream = () => {\r\n  navigator.mediaDevices.getUserMedia(defaultConstrains)\r\n    .then(stream => {\r\n      store.dispatch(setLocalStream(stream));\r\n      store.dispatch(setCallState(callStates.CALL_AVAILABLE));\r\n      createPeerConnection();\r\n    })\r\n    .catch(err => {\r\n      console.log('error occured when trying to get an access to get local stream');\r\n      console.log(err);\r\n    });\r\n}\r\n;\r\n\r\nconst createPeerConnection = () => {\r\n  peerConnection = new RTCPeerConnection(configuration);\r\n\r\n  const localStream = store.getState().call.localStream;\r\n\r\n  for (const track of localStream.getTracks()) {\r\n    peerConnection.addTrack(track, localStream);\r\n  }\r\n\r\n  peerConnection.ontrack = ({ streams: [stream] }) => {\r\n    store.dispatch(setRemoteStream(stream));\r\n  };\r\n\r\n  peerConnection.onicecandidate = (event) => {\r\n    console.log('geeting candidates from stun server');\r\n    if (event.candidate) {\r\n      wss.sendWebRTCCandidate({\r\n        candidate: event.candidate,\r\n        connectedUserSocketId: connectedUserSocketId\r\n      });\r\n    }\r\n  };\r\n\r\n  peerConnection.onconnectionstatechange = (event) => {\r\n    if (peerConnection.connectionState === 'connected') {\r\n      console.log('succesfully connected with other peer');\r\n    }\r\n  };\r\n};\r\n\r\nexport const callToOtherUser = (calleeDetails) => {\r\n  connectedUserSocketId = calleeDetails.socketId;\r\n  store.dispatch(setCallState(callStates.CALL_IN_PROGRESS));\r\n  store.dispatch(setCallingDialogVisible(true));\r\n  wss.sendPreOffer({\r\n    callee: calleeDetails,\r\n    caller: {\r\n      username: store.getState().dashboard.username\r\n    }\r\n  });\r\n};\r\n\r\nexport const handlePreOffer = (data) => {\r\n  if (checkIfCallIsPossible()) {\r\n    connectedUserSocketId = data.callerSocketId;\r\n    store.dispatch(setCallerUsername(data.callerUsername));\r\n    store.dispatch(setCallState(callStates.CALL_REQUESTED));\r\n  } else {\r\n    wss.sendPreOfferAnswer({\r\n      callerSocketId: data.callerSocketId,\r\n      answer: preOfferAnswers.CALL_NOT_AVAILABLE\r\n    });\r\n  }\r\n};\r\n\r\nexport const acceptIncomingCallRequest = () => {\r\n  wss.sendPreOfferAnswer({\r\n    callerSocketId: connectedUserSocketId,\r\n    answer: preOfferAnswers.CALL_ACCEPTED\r\n  });\r\n\r\n  store.dispatch(setCallState(callStates.CALL_IN_PROGRESS));\r\n};\r\n\r\nexport const rejectIncomingCallRequest = () => {\r\n  wss.sendPreOfferAnswer({\r\n    callerSocketId: connectedUserSocketId,\r\n    answer: preOfferAnswers.CALL_REJECTED\r\n  });\r\n  resetCallData();\r\n};\r\n\r\nexport const handlePreOfferAnswer = (data) => {\r\n  store.dispatch(setCallingDialogVisible(false));\r\n\r\n  if (data.answer === preOfferAnswers.CALL_ACCEPTED) {\r\n    sendOffer();\r\n  } else {\r\n    let rejectionReason;\r\n    if (data.answer === preOfferAnswers.CALL_NOT_AVAILABLE) {\r\n      rejectionReason = 'Callee is not able to pick up the call right now';\r\n    } else {\r\n      rejectionReason = 'Call rejected by the callee';\r\n    }\r\n    store.dispatch(setCallRejected({\r\n      rejected: true,\r\n      reason: rejectionReason\r\n    }));\r\n\r\n    resetCallData();\r\n  }\r\n};\r\n\r\nconst sendOffer = async () => {\r\n  const offer = await peerConnection.createOffer();\r\n  await peerConnection.setLocalDescription(offer);\r\n  wss.sendWebRTCOffer({\r\n    calleeSocketId: connectedUserSocketId,\r\n    offer: offer\r\n  });\r\n};\r\n\r\nexport const handleOffer = async (data) => {\r\n  await peerConnection.setRemoteDescription(data.offer);\r\n  const answer = await peerConnection.createAnswer();\r\n  await peerConnection.setLocalDescription(answer);\r\n  wss.sendWebRTCAnswer({\r\n    callerSocketId: connectedUserSocketId,\r\n    answer: answer\r\n  });\r\n};\r\n\r\nexport const handleAnswer = async (data) => {\r\n  await peerConnection.setRemoteDescription(data.answer);\r\n};\r\n\r\nexport const handleCandidate = async (data) => {\r\n  try {\r\n    console.log('adding ice candidates');\r\n    await peerConnection.addIceCandidate(data.candidate);\r\n  } catch (err) {\r\n    console.error('error occured when trying to add received ice candidate', err);\r\n  }\r\n};\r\n\r\nexport const checkIfCallIsPossible = () => {\r\n  if (store.getState().call.localStream === null ||\r\n  store.getState().call.callState !== callStates.CALL_AVAILABLE) {\r\n    return false;\r\n  } else {\r\n    return true;\r\n  }\r\n};\r\n\r\nlet screenSharingStream;\r\n\r\nexport const switchForScreenSharingStream = async () => {\r\n  if (!store.getState().call.screenSharingActive) {\r\n    try {\r\n      screenSharingStream = await navigator.mediaDevices.getDisplayMedia({ video: true });\r\n      store.dispatch(setScreenSharingActive(true));\r\n      const senders = peerConnection.getSenders();\r\n      const sender = senders.find(sender => sender.track.kind == screenSharingStream.getVideoTracks()[0].kind);\r\n      sender.replaceTrack(screenSharingStream.getVideoTracks()[0]);\r\n    } catch (err) {\r\n      console.error('error occured when trying to get screen sharing stream', err);\r\n    }\r\n  } else {\r\n    const localStream = store.getState().call.localStream;\r\n    const senders = peerConnection.getSenders();\r\n    const sender = senders.find(sender => sender.track.kind == localStream.getVideoTracks()[0].kind);\r\n    sender.replaceTrack(localStream.getVideoTracks()[0]);\r\n    store.dispatch(setScreenSharingActive(false));\r\n    screenSharingStream.getTracks().forEach(track => track.stop());\r\n  }\r\n}\r\n;\r\n\r\nexport const handleUserHangedUp = () => {\r\n  resetCallDataAfterHangUp();\r\n};\r\n\r\nexport const hangUp = () => {\r\n  wss.sendUserHangedUp({\r\n    connectedUserSocketId: connectedUserSocketId\r\n  });\r\n\r\n  resetCallDataAfterHangUp();\r\n};\r\n\r\nconst resetCallDataAfterHangUp = () => {\r\n\r\n  if (store.getState().call.screenSharingActive) {\r\n    screenSharingStream.getTracks().forEach(track => {\r\n      track.stop();\r\n    });\r\n  }\r\n\r\n  store.dispatch(resetCallDataState());\r\n  peerConnection.close();\r\n  peerConnection = null;\r\n  createPeerConnection();\r\n  resetCallData();\r\n\r\n  const localStream = store.getState().call.localStream;\r\n\r\n  localStream.getVideoTracks()[0].enabled = true;\r\n  localStream.getAudioTracks()[0].enabled = true;\r\n\r\n};\r\n\r\nexport const resetCallData = () => {\r\n  connectedUserSocketId = null;\r\n  store.dispatch(setCallState(callStates.CALL_AVAILABLE));\r\n};\r\n","C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\store\\actions\\callActions.js",[],"C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\Dashboard\\components\\DirectCall\\DirectCall.js",[],"C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\Dashboard\\components\\RemoteVideoView\\RemoteVideoView.js",[],"C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\Dashboard\\components\\LocalVideoView\\LocalVideoView.js",[],"C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\Dashboard\\components\\CallRejectedDialog\\CallRejectedDialog.js",["122"],"import React, { useEffect } from 'react';\r\n\r\nimport './CallRejectedDialog.css';\r\n\r\nconst CallRejectedDialog = ({ reason, hideCallRejectedDialog }) => {\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            hideCallRejectedDialog({\r\n                rejected: false,\r\n                reason: ''\r\n            });\r\n        }, [4000]);\r\n    }, []);\r\n    \r\n    \r\n    return (\r\n        <div className='call_rejected_dialog background_secondary_color'>\r\n            <span>\r\n                {reason}\r\n            </span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CallRejectedDialog;","C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\Dashboard\\components\\IncomingCallDialog\\IncomingCallDialog.js",[],"C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\Dashboard\\components\\CallingDialog\\CallingDialog.js",[],"C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\Dashboard\\components\\ConversationButtons\\ConversationButtons.js",[],"C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\Dashboard\\components\\ConversationButtons\\ConversationButton.js",[],"C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\Dashboard\\components\\DashboardInformation\\DashboardInformation.js",[],"C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\utils\\webRTC\\webRTCGroupCallHandler.js",[],"C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\Dashboard\\components\\GroupCallRoomsList\\GroupCallRoomsList.js",[],"C:\\Users\\Timothy Lam\\Documents\\GitHub\\WebRTC-Videotalker\\video-talker-frontend\\src\\Dashboard\\components\\GroupCallRoomsList\\GroupCallRoomsListItem.js",[],{"ruleId":"123","severity":1,"message":"124","line":36,"column":11,"nodeType":"125","endLine":36,"endColumn":62},{"ruleId":"123","severity":1,"message":"124","line":20,"column":9,"nodeType":"125","endLine":20,"endColumn":68},{"ruleId":"126","severity":1,"message":"127","line":181,"column":63,"nodeType":"128","messageId":"129","endLine":181,"endColumn":65},{"ruleId":"126","severity":1,"message":"127","line":189,"column":61,"nodeType":"128","messageId":"129","endLine":189,"endColumn":63},{"ruleId":"130","severity":1,"message":"131","line":13,"column":8,"nodeType":"132","endLine":13,"endColumn":10,"suggestions":"133"},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'hideCallRejectedDialog'. Either include it or remove the dependency array. If 'hideCallRejectedDialog' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["134"],{"desc":"135","fix":"136"},"Update the dependencies array to be: [hideCallRejectedDialog]",{"range":"137","text":"138"},[349,351],"[hideCallRejectedDialog]"]